import { gql, useMutation } from '@apollo/client';
import { ArrowBackIcon } from '@chakra-ui/icons';
import { Container, Heading, IconButton, useToast } from '@chakra-ui/react';
import EventForm from 'components/event/EventForm';
import moment from 'moment';
import router from 'next/dist/client/router';
import Head from 'next/head';
import React from 'react';
import { useForm } from 'react-hook-form';

const CREATE_EVENT = gql`
  mutation CreateEventQuery($event: CreateEventDtoInput!) {
    createEvent(event: $event) {
      id
    }
  }
`;

const Event = () => {
  const toast = useToast({ duration: 3000, position: 'bottom-left' });
  const {
    handleSubmit,
    register,
    setValue,
    getValues,
    formState: { errors, isSubmitting },
  } = useForm();

  const [createEvent] = useMutation(CREATE_EVENT, {
    onCompleted: (data) => {
      toast({
        title: 'Event created',
        status: 'success',
      });
      router.push(`/event/${data.createEvent.id}`);
    },
    onError: (err) => {
      toast({
        title: err.message,
        status: 'error',
      });
    },
  });

  const onSubmit = (values: any) => {
    values.startDate = moment(values.startDate).format();
    values.endDate = moment(values.endDate).format();
    createEvent({ variables: { event: values } });
  };

  return (
    <div>
      <Head>
        <title>Creating event</title>
        <meta content='Generated by create next app' name='description' />
        <link href='/favicon.ico' rel='icon' />
      </Head>
      <Container maxW='container.lg' mt='25px'>
        <Heading m='25px 0' size='2xl'>
          <IconButton aria-label='Add event' colorScheme='teal' icon={<ArrowBackIcon />} isRound onClick={() => router.push('/')} variant='outline' /> Create
          Event
        </Heading>
        <form onSubmit={handleSubmit(onSubmit)}>
          <EventForm errors={errors} getValues={getValues} isSubmitting={isSubmitting} register={register} setValue={setValue} />
        </form>
      </Container>
    </div>
  );
};

export default Event;
