import { gql, useMutation } from '@apollo/client';
import { ArrowBackIcon, DeleteIcon } from '@chakra-ui/icons';
import { Button, Container, FormControl, FormLabel, Heading, IconButton, Input as CInput, useToast } from '@chakra-ui/react';
import EventForm from 'components/event/EventForm';
import DateTime from 'components/form/DateTime';
import Input from 'components/form/Input';
import { client } from 'contexts/Apollo';
import moment from 'moment';
import { GetServerSideProps, InferGetServerSidePropsType } from 'next';
import router from 'next/dist/client/router';
import Head from 'next/head';
import { usePlacesWidget } from 'react-google-autocomplete';
import { useForm } from 'react-hook-form';
import { formatMomentFromZoneTimeDate } from 'utils/date';
import { IEvent } from 'utils/types';

const EVENT_BY_ID = gql`
  query GetEventById($id: String!) {
    event(id: $id) {
      id
      title
      description
      location {
        id
        lat
        lng
        address
      }
      startDate
      endDate
      picture
      creator {
        id
        given_name
        family_name
      }
    }
  }
`;

const UPDATE_EVENT = gql`
  mutation UpdateEventQuery($id: String!, $event: CreateEventDtoInput!) {
    updateEvent(id: $id, event: $event) {
      id
    }
  }
`;
const DELETE_EVENT = gql`
  mutation DeleteEventQuery($id: String!) {
    deleteEvent(id: $id)
  }
`;

export const getServerSideProps: GetServerSideProps = async (context) => {
  const eventId = context.params?.event_id;
  try {
    const { data } = await client.query({
      query: EVENT_BY_ID,
      variables: { id: eventId },
    });
    const event: IEvent = await data?.event;
    return {
      props: { event },
    };
  } catch (error) {
    return {
      redirect: {
        destination: '/login',
        permanent: false,
      },
    };
  }
};

const Event = ({ event }: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const toast = useToast({ duration: 3000, position: 'bottom-left' });
  const {
    handleSubmit,
    register,
    setValue,
    getValues,
    formState: { errors, isSubmitting },
  } = useForm({
    defaultValues: {
      title: event.title,
      locationId: event.location.id,
      address: event.location.address,
      lat: event.location.lat,
      lng: event.location.lng,
      description: event.description,
      picture: event.picture,
      startDate: formatMomentFromZoneTimeDate(event.startDate).format('YYYY-MM-DD[T]HH:mm'),
      endDate: formatMomentFromZoneTimeDate(event.endDate).format('YYYY-MM-DD[T]HH:mm'),
    },
  });

  const [updateEvent] = useMutation(UPDATE_EVENT, {
    onCompleted: (data) => {
      toast({
        title: 'Event successfully updated',
        status: 'success',
      });
      router.push(`/event/${data.updateEvent.id}`);
    },
    onError: (err) => {
      toast({
        title: err.message,
        status: 'error',
      });
    },
  });
  
  const [deleteEvent, { loading: deleteLoading }] = useMutation(DELETE_EVENT, {
    onCompleted: () => {
      toast({
        title: 'Event successfully deleted',
        status: 'success',
      });
      router.push(`/`);
    },
    onError: (err) => {
      toast({
        title: err.message,
        status: 'error',
      });
    },
  });

  const onSubmit = (values: any) => {
    values.startDate = moment(values.startDate).format();
    values.endDate = moment(values.endDate).format();
    updateEvent({ variables: { id: event.id, event: values } });
  };


  return (
    <>
      <Head>
        <title>{event.title}</title>
        <meta content='Generated by create next app' name='description' />
        <link href='/favicon.ico' rel='icon' />
      </Head>
      <Container maxW='container.lg' mt='25px'>
        <Heading m='25px 0' size='2xl'>
          <IconButton
            aria-label='Add event'
            colorScheme='teal'
            icon={<ArrowBackIcon />}
            isRound
            onClick={() => router.push(`/event/${event.id}`)}
            variant='outline'
          />{' '}
          Update Event
        </Heading>
        <form onSubmit={handleSubmit(onSubmit)}>
          <EventForm errors={errors} event={event} getValues={getValues} isSubmitting={isSubmitting} register={register} setValue={setValue} />
          <Button colorScheme='red' isLoading={deleteLoading} mt={4} onClick={() => deleteEvent({ variables: { id: event.id } })} type='button'>
            Delete
          </Button>
        </form>
      </Container>
    </>
  );
};

export default Event;
